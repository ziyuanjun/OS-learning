# -*- eval: (setq org-download-image-dir (file-name-sans-extension (buffer-name))); -*-
# -*- org-export-babel-evaluate: nil; -*-
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../orgstyle.css"/>
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:t arch:headline author:t c:nil S:nil -:nil
#+OPTIONS: creator:nil d:(not "En") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:t p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t timestamp:t
#+OPTIONS: title:t toc:t todo:t |:t 
#+OPTIONS: ^:{}
#+LATEX_CLASS: ctexart
#+STARTUP: entitiespretty:t
#+TITLE: Python 学习笔记
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.0.50.2 (Org mode 9.0.4)


Python 学习中遇到的问题总结。
已有一定的 python 经验，因此内容偏向高级或易出错的部分。

* 装饰器
  函数、方法或类的前面可以使用一个特殊的符号，称为*装饰器*，其目的是修改定义后面的行为。
** 语法

  使用 @ 符号，必须放在单独的行上并且位于对应的函数、方法或者类之前，例如：

  #+BEGIN_SRC py
  @staticmethod
  def bar():
      pass
  #+END_SRC
  可以使用多个装饰器，但每个装饰器必须位于不同的行上，例如：
  #+BEGIN_SRC py
  @foo
  @bar
  def spam():
      pass
  #+END_SRC
  <<demo>>
** 用途
   装饰器本质上是一个函数，主要用途是包装另一个函数或类。比如上面的[[demo][例子]]中，定义好函数 spam() 之后，函数对象本身就立即被传递给函数 bar() 和 foo()，相当于：
  #+BEGIN_SRC py
  def spam():
      pass
  spam = foo(bar(spam()))
  #+END_SRC
  最终的函数 spam() 是先后被 bar() 和 foo() 包装的对象。




